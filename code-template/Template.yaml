apiVersion: backstage.io/v1beta2
kind: Template
metadata:
  name: code-template
  title: Code Template
  description: Modelo de um componente para criação de repositório dedicado à códigos de aplicações.
  tags: [api, open-source]

spec:
  owner: Agents4Good/Fundação
  type: service
  parameters:
    - title: Configuração do projeto
      required: [name, title, description, namespace]
      properties:
        name:
          title: Nome
          type: string
          description: Nome do seu projeto. Use apenas letras, números, pontos e hífens.
          ui:autofocus: true
        title:
          title: Título
          type: string
          description: Nome do seu projeto que será exibido no README e no catálogo de componentes.
        description:
          title: Descrição
          type: string
          description: Breve descrição do seu projeto.
          ui:options:
            rows: 3
        namespace:
          title: Namespace-raíz
          type: string
          description: O namespace-raíz do projeto. Utilize apenas eltras e pontos.
        owner:
          title: Proprietário(a)(s)
          type: string
          description: Equipe responsável pelo projeto.
          ui:field: OwnerPicker
          ui:options:
            allowedKinds: [Group]
    - title: Configuração do Repositório
      required: [repoUrl]
      properties:
        repoUrl:
          title: Local do repositório
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com

  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:cookiecutter
      input:
        url: ./template
        copyWithoutRender:
          - .github/workflows/*
        values:
          name: '{{ parameters.name }}'
          title: '{{ parameters.title }}'
          description: '{{ parameters.description }}'
          namespace: '{{ parameters.namespace }}'
          destination: '{{ parseRepoUrl parameters.repoUrl }}'
          owner: '{{ parameters.owner }}'

    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: '{{ parameters.title }}'
        repoUrl: '{{ parameters.repoUrl }}'

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: '{{ steps.publish.output.repoContentsUrl }}'
        catalogInfoPath: '/catalog-info.yaml'

  output:
    remoteUrl: '{{ steps.publish.output.remoteUrl }}'
    entityRef: '{{ steps.register.output.entityRef }}'